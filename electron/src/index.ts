import {app, BrowserWindow, dialog} from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import {ipcMain, shell} from "electron";
import axios from "axios";
import xlsx from "json-as-xlsx"
import {PriceState} from "./types";
import {PriceModel} from "./services";


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}


app.whenReady().then(() => {
  ipcMain.handle('request', async (_, axios_request) => {
    const result = await axios(axios_request);
    return {data: result.data, status: result.status}
  })

  ipcMain.handle('saveExcel', async (_, prices: PriceState) => {
    let filename= dialog.showSaveDialogSync({});
    if(!filename) {
      return
    }

    let data = [
      {
        sheet: "Prices",
        columns: [
          { label: "Start", value: "start" }, // Top level data
          { label: "End", value: "end" },
          { label: "Price", value: (a: any) => a.marketprice, format: "#,##0.00" },
        ],
        content: prices.flatMap(p => p.data.map(a => ({...a})))
      }
    ]

    let settings = {
      fileName: filename, // Name of the resulting spreadsheet
      extraLength: 3, // A bigger number means that columns will be wider
      writeMode: "writeFile", // The available parameters are 'WriteFile' and 'write'. This setting is optional. Useful in such cases https://docs.sheetjs.com/docs/solutions/output#example-remote-file
      writeOptions: {}, // Style options from https://docs.sheetjs.com/docs/api/write-options
    }

    xlsx(data, settings) // Will download the excel file

    filename += '.xlsx';

    const err = await shell.openPath(filename);
    if(err) throw new Error(err);

    return filename;
  });
});

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // contextIsolation: false,
      // nodeIntegration: true
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


